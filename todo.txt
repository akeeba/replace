Tests:
================================================================================
AbstractLogger


Driver needs to get __sleep and __wakeup. Disconnect on __sleep and __destroy. Reconnect on __wakeup.

I need a special DB driver TRAIT for WordPress. This will be untestable since WP is using constants (grunt...). However, it's a trivial class so not all is lost.

Copy the code from Akeeba\Engine\Driver\WordPress constructor for that driver.

What the trait does:
    disconnect sets the connection to null WITHOUT disconnecting
    connect set the connection to something we get from WP (see the aforementioned driver)

Create two concrete classes WordPressMySQL and WordPressMySQLi implementing the trait

Create a helper which returns the correct driver object (WordPressMySQL, WordPressMySQLi, MySQL or MySQLi) depending on whether I run inside WP or outside of it. If I am outside I will need a path to a WP site to extract the connection parameters.

Remove observable. This leads to security issues with unserialization (arbitrary callbacks can be injected to the serialized transient object and lead to arbitrary code execution).

Instead, we will accept a list of objects in the constructor's $parameters.

Depending on which interface they implement they will be added to a different private array variable. The idea is that I have on array for processing objects which run always and a different one for objects which only run when the table / row definition is modified.

We will be calling a hardcoded method name (based on the interface) as needed.


Code + Tests (Library)
================================================================================

Add RegEx support to replacer
    Add RegEx support -- Special worry about UTF data!
    Test RegEx support

Database iterator Interface (extends engine part interface)
    Input: list of filters

Database iterator
    Dependency: DB driver
    Dependency: table iterator(s)
    Gets the available table names
    Runs the iterator(s) against each one
    !! Tests should run against simulated data

Table iterator Interface (extends engine part interface)
    Input: table name (string)
    Input: table information
    Input: column information

Table modifying iterator
    Dependency: DB driver
    Dependency: logger
    Dependency: table callback(s)
    Dependency: table DDL backup callback(s)
    Input: table name (string)
    Input: table information
    Input: column information
    Runs the table callback(s) against the table. Run the backup callbacks if the new table information differs.

Table Callback Interface
    Input: table name (string)
    Input: table information
    Input: column information
    Return: new table and column information

Collation Change table callback
    Dependency: writer interface, used to write to SQL files. No writer = no export.
    Dependency: logger
    Configuration: new collation for table, column
    Configuration: dry run
    The resulting DDL may be run (if not dry run) and/or output to a SQL file (if writer is provided)

Engine Change table callback
    Dependency: writer interface, used to write to SQL files. No writer = no export.
    Dependency: logger
    Configuration: preferred engine, default InnoDB
    Configuration: dry run
    The resulting DDL may be run (if not dry run) and/or output to a SQL file (if writer is provided)

Table DDL backup Interface
    Dependency: writer interface
    Input: table name (string)
    Input: old table information
    Input: new table information
    Input: old column information
    Input: new column information

Collation Change DDL backup callback
    The resulting DDL is written to the backup SQL file

Engine Change DDL backup callback
    The resulting DDL is written to the backup SQL file

Data processing table iterator (engine part)
    Dependency: DB driver
    Dependency: logger
    Dependency: row processing callback
    Dependency: row backup callback
    Fetches column information and table size, processes the table in chunks
    Each chunk consists of many rows
    For each row we call one or more callbacks (DO NOT pass the DB connection to the callbacks!)
    !! Tests should run against simulated data

Row Callback interface
    Input: Original Row
    Input: table name (string)
    Input: table information
    Input: column information
    Return: processed row

Row Backup Callback interface
    Input: Original Row
    Input: Modified Row
    Input: table name (string)
    Input: table information
    Input: column information
    Return: void

Plain text replace row callback
    Dependency: writer interface, used to write to SQL files. No writer = no export.
    Dependency: DB driver
    Dependency: logger
    Configuration: do it live or dry run (dry run does NOT execute SQL)

RegEx replace row callback
    extending the plain text callback, only differs in the way it handles the replacement

Row Backup callback
    Dependency: writer interface, used to write to backup SQL files
    Dependency: DB driver
    Dependency: logger

Writer interface

Writer implementation
    Dependency: logger
    Configuration: file

Logger
    PSR logger implementation?


Parameters
================================================================================
[
	'databases' => [
		[
			'driver' => '',
			'host' => '',
			'user' => '',
			'password' => '',
			'port' => '',
			'socket' => '',
			'database' => '',
			'prefix' => '',
			'select' => true,
		],
		// -- OR --
		[
			'driver' => '',
			'connection' => $resourceOrMySQLiObject,
			'prefix' => '',
			'select' => false,
		]
	],
	// Include all tables, regardless of their prefix. False = only those matching the configured prefix.
	'allTables' => false,
	// Table names to exclude. Either abstract (#__table) or concrete (wp_table) name accepted
	'excludeTables' => [
		'#__table_one',
		'#__table_two',
	],
	// Table rows to exclude.
	'excludeRows' => [
		'#__table1' => ['row1', 'row2', ],
		'#__table2' => ['rowA', 'rowB', ],
		// ...
	]
]